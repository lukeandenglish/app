require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
$RNFirebaseAsStaticFramework = true
$FirebaseSDKVersion = '10.7.0'

platform :ios, '12.4'
install! 'cocoapods', :deterministic_uuids => false
pod 'Firebase', :modular_headers => true
pod 'FirebaseCore', :modular_headers => true
pod 'GoogleUtilities', :modular_headers => true
pod 'react-native-splash-screen', :path => '../node_modules/react-native-splash-screen'
pod 'react-native-video/VideoCaching', :path => '../node_modules/react-native-video/react-native-video.podspec'

target 'LukeEng' do
  config = use_native_modules!
  # use_frameworks! :linkage => :static
  deployment_target = '12.0'
  RCT_NEW_ARCH_ENABLED=1

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'LukeEngTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    installer.generated_projects.each do |project|
      project.targets.each do |target|
          if target.name == "React-Core.common-AccessibilityResources"
            target.remove_from_project
          end
          target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
          end
      end
        project.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
        end
    end
    installer.target_installation_results.pod_target_installation_results.each do |pod_name, target_installation_result|
      target_installation_result.native_target.build_configurations.each do |config|
        # For third party modules who have React-bridging dependency to search correct headers
        config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited) '
        config.build_settings['HEADER_SEARCH_PATHS'] << '"$(PODS_ROOT)/Headers/Private/React-bridging/react/bridging" '
        config.build_settings['HEADER_SEARCH_PATHS'] << '"$(PODS_CONFIGURATION_BUILD_DIR)/React-bridging/react_bridging.framework/Headers" '
      end
    end
    # react_native_post_install(
    #   installer,
    #   # Set `mac_catalyst_enabled` to `true` in order to apply patches
    #   # necessary for Mac Catalyst builds
    #   :mac_catalyst_enabled => false
    # )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

    # Get the development team id from the main project
    dev_team_id = "QKJ94TLQ69"
    project = installer.aggregate_targets[0].user_project
    project.targets.each do |target|
      target.build_configurations.each do |config|
        if dev_team_id.empty? and !config.build_settings['DEVELOPMENT_TEAM'].nil?
          dev_team_id = config.build_settings['DEVELOPMENT_TEAM']
        end
      end
    end

    # Reconfigure the pods, update deployment target and signing settings
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        if target.respond_to?(:product_type) and target.product_type == 'com.apple.product-type.bundle'
          config.build_settings['DEVELOPMENT_TEAM'] = dev_team_id
          config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution';
          config.build_settings['CODE_SIGN_STYLE'] = 'Manual';
        end if

        config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
      end
    end
  end
end
